[NEW]

case Type::LIGHTFIGHTER:
            _spriteComponent.LoadSprite("Resources/Textures/starfleet_ship_fighter.png");
            _spriteComponent.GetSprite().scale({0.05F, 0.05F});
            _healthComponent.SetHealth(100);
            _speed = 80;
            _trainingSpeed = 0.5f;
            _damage = 20;
            _damageScaleFactor = 0.25f;
            _fireRate = 0.25f;
            _shipCost = 250;
            _projectileType = Projectile::Type::LASER_RED_REGULAR;
            break;
        case Type::HEAVYFIGHTER:
            _spriteComponent.LoadSprite("Resources/Textures/starfleet_ship_repair.png");
            _spriteComponent.GetSprite().scale({0.05F, 0.05F});
            _healthComponent.SetHealth(150);
            _speed = 70;
            _trainingSpeed = 0.4f;
            _damage = 0;
            _damageScaleFactor = 0.10f;
            _fireRate = 2.0f;
            _shipCost = 200;
            _projectileType = Projectile::Type::LASER_BLUE_SMALL;
            break;
        case Type::SUPPORT:
            _spriteComponent.LoadSprite("Resources/Textures/starfleet_ship_scout.png");
            _spriteComponent.GetSprite().scale({0.30F, 0.30F});
            _healthComponent.SetHealth(75);
            _speed = 100;
            _trainingSpeed = 0.6f;
            _damage = 10;
            _damageScaleFactor = 0.10f;
            _fireRate = 1.0f;
            _shipCost = 100;
            _projectileType = Projectile::Type::LASER_BLUE_SMALL;
            break;
        case Type::DESTROYER:
            _spriteComponent.LoadSprite("Resources/Textures/starfleet_ship_destroyer.png");
            _spriteComponent.GetSprite().scale({0.05F, 0.05F});
            _healthComponent.SetHealth(250);
            _speed = 40;
            _trainingSpeed = 0.9f;
            _damage = 150;
            _damageScaleFactor = 1.0f;
            _fireRate = 3.0f;
            _shipCost = 1000;
            _projectileType = Projectile::Type::LASER_BLUE_LARGE;
            break;
        case Type::BATTLESHIP:
            _spriteComponent.LoadSprite("Resources/Textures/starfleet_ship_battleship.png");
            _spriteComponent.GetSprite().scale({0.05F, 0.05F});
            _healthComponent.SetHealth(500);
            _speed = 30;
            _trainingSpeed = 0.8f;
            _damage = 75;
            _damageScaleFactor = 0.75f;
            _fireRate = 3.0f;
            _shipCost = 750;
            _projectileType = Projectile::Type::LASER_BLUE_LARGE;
            break;
        case Type::MOTHERSHIP:
            _spriteComponent.LoadSprite("Resources/Textures/starfleet_ship_flagship.png");
            _spriteComponent.GetSprite().scale({0.08F, 0.08F});
            _healthComponent.SetHealth(5000);
            _speed = 10;
            _damage = 50;
            _fireRate = 1.0f;
            _projectileType = Projectile::Type::LASER_BLUE_LARGE;
            break;




[PREMISE]: Take command of fleets capital ship and take your fleet into battle. Control
           the actions of each ship in your fleet individually through various commands
           like Attack, Defend, Regroup and Reposition. Your fleet will follow wherever
           the capital ship may venture, unless commanded otherwise.

[GAMEPLAY THOUGHTS]:
                    - Ships flash green when repairing?
                    - Ships flash red when low on health
                    - Ships possess blue ring around them when shielding
                    - Repair ship shows repair symbol when repairing nearby ships


   Game::Init()
   {
        fleet.add(OLDStarship(OLDStarship::Class::LIGHTFIGHTER));

        fleet.getStarshipCommands().Attack(OLDStarship& starship);
        fleet.getStarshipCommands().Defend();
        fleet.getStarshipCommands().Reposition(sf::Vector2f<float>{0,0});

        Projectile laser(Projectile::Type::Laser);
        Projectile missile(Projectile::Type::Missile);

        starship[SELECTED].getCommands().Attack(OLDStarship& starship, missile);
        starship[SELECTED].getCommands().Defend(OLDStarship& starship); // OR Protect()
        starship[SELECTED].getCommands().Protect(OLDStarship& starship);
        starship[SELECTED].getCommands().Shields(int duration, int strength);
        starship[SELECTED].getCommands().Reposition(sf::Vector2f<float>{});
        starship[SELECTED].getCommands().Follow(OLDStarship& starship);
   }

player.AddToFleet(Ship::LIGHTFIGHTER);
enemy.AddToFleet(Ship::BOMBER);

/*SpriteComponent& GetSpriteComponent() { return _spriteComponent; };
    HealthComponent& GetHealthComponent() { return _healthComponent; };
    PhysicsComponent& GetPhysicsComponent() { return _physicsComponent; };
    AnimationComponent& GetAnimationComponent() { return _animationComponent; };
    AudioComponent& GetAudioComponent() { return _audioComponent; };*/

GameObject
{
    SpriteComponent
    PhysicsComponent
}

GameObject gameobject


Damage pop-up        { UiText }
Background           { Sprite }
ParticleEffect       { Sprite }
Panel                { Sprite, UiText }
Projectile           { Sprite, ParticleEffect }
OLDStarship             { Sprite, Weapon{Projectile}, Physics, Ai, LevelSystem, Health, Collider }
Health bar           { Panel }
Fleet panel          { Panel }
Command panel        { Panel }
Ability panel        { Panel }
Queue panel          { Panel }
Ship level           { Panel }
Galaxy map           { Panel, Map }
Button               { Panel, Collider }
Command button       { Button }
Fleet                { OLDStarship }
Player               { Fleet, Credits }
Enemy                { Fleet }

CollisionSystem
AudioManager
AnimationManager

IBehaviour
{
    virtual Idle();
    virtual Patrol();
    virtual Chase();
    virtual Attack();
    virtual Flee();
}

StarshipFighterBehaviour : IBehaviour
{
    Idle() override;
    Patrol() override;
    Chase() override;
    Attack() override;
    Flee() override;
}

LightFighter : OLDStarship
{
    StarshipFighterBehaviour;
}


starship.GetAnimation();
starship.GetAudio();
starship.GetCollider();

player.GetStarship().GetAnimation();
enemy.GetStarship().GetAnimation();

Audio
- Projectile impact
- OLDStarship thrusters
- Button press
- Menu music
- Game music

player.GetStarship().GetAudio();
enemy.GetStarship().GetAudio();

player.GetFleet().GetStarship()[i].GetCollider();
enemy.GetFleet().GetStarship()[i].GetCollider();

if(CollisionBetween(player.GetFleet().GetStarship()[i].GetCollider()))



Type object pattern
i.e. monsters, items

Actor // or Entity
{
    position / transformComponent
    healthComponent?
    spriteComponent?
}

class Monster : Actor
{
    Breed breed
    int health
    float position
}

class Breed
{
    string T
    int maxHealth
    attack
    moves
    flags
    loot
}


Command pattern

class Monster : Action
{
    Action takeTurn();
}

abstract class Action
{
    ActionResult perform();
}

class WalkAction : Action
{
    ActionResult perform()
    {
        ...
    }
}
















































































