// TODO List

// COMPLETE
- Create Constants class [DONE]
- Move fonts to Scene class [DONE]
- Create menu game title [DONE]
- Create panel class [DONE]
- Create button class [NOT NEEDED?]
- Create menu options [DONE]
- Fleet Size shown visually on Shipyard scene [DONE]
- Fleet colour option on Shipyard scene [DONE]

// TO DO
- Animated background menu [STARTED]
- Ship base class, deriving classes: LightFighter, Repair, Battleship, Destroyer, CommandShip
- std::vector<LightFighter> light_fighter; Vector size determined in shipyard.
- light_fighter.shoot(), light_fighter.shields()
- GameData class to pass data between scene classes easily?

GOALS
- Destroy opponents command ship to win
- To damage the command ship, the opponent's battleships need to be destroyed first


player_fleet.setNumOfShips(5, FIGHTER);

std::vector<Ship> ships.
ships.create(5, FIGHTER);


GameScene::init()
{
    std::vector<Ship> ships;
    for(int i = 0; i < Fleet::fleet_size; i++)
    {
        ships.emplace_back();
    }



    CLASSES: Player, Enemy, Fleet, Ship, Fighter, RepairShip...
             HealthBar, CommandPanel,

    player.getFleet()?
    player.getFleet().getShip()[i]?



    Player player;
    Fleet player_fleet;
    std::vector<Ship> player_ships;

    EnemyAI enemy; (?)
    Fleet enemy_fleet; (?)
    std::vector<Ship> enemy_ships;
}


    [PREMISE]: Take command of fleets capital ship and take your fleet into battle. Control
               the actions of each ship in your fleet individually through various commands
               like Attack, Defend, Regroup and Reposition. Your fleet will follow wherever
               the capital ship may venture, unless commanded otherwise.

    [GAMEPLAY THOUGHTS]:
                        - Ships flash green when repairing?
                        - Ships flash red when low on health
                        - Ships possess blue ring around them when shielding
                        - Repair ship shows repair symbol when repairing nearby ships


    Player Class
    - eventHandler() - Handle movement of capital ship through mouse?

    SpriteComponent class
    - loadSprite()
    - getSprite()

    CommandActions class
    - enum class Actions { NONE, ATTACK, DEFEND, REGROUP, REPOSITION }
    - Actions actions = Actions::NONE;

    Starship Class : public SpriteComponent
    - Projectile projectile
    - CommandActions actions - actions.setCommand(ATTACK);
    - setHealth(float health);
    - setDamage(float damage);
    - setSpeed(float speed);
    - setVelocity()
    - setAcceleration()

    Mothership class : public Starship
    - Player player
    - loadSprite(mothership.png) in constructor
    - health = 2500;
    - damage = 100;
    - speed = 8;

    LightFighter class : public Starship
    - loadSprite(lightfighter.png) in constructor
    - health = 200;
    - damage = 50;
    - speed = 20;

    RepairShip class : public Starship
    - repair(ship)
    - loadSprite(repairship.png) in constructor
    - health = 400;
    - damage = 0;
    - repair_per_second = 20;
    - speed = 14;

    Destroyer class : public Starship
    - fireTorpedoes() (?)
    - loadSprite(destroyer.png) in constructor
    - health = 600;
    - damage = 500;
    - speed = 16;

    Battleship class : public Starship
    - loadSprite(battleship.png) in constructor
    - health = 1200;
    - damage = 200;
    - speed = 12;

    GameScene::init()
    {
        std::vector<Starship> starship;
        std::vector<Projectile> projectile;

        std::vector<LightFighter> lightfighter;
        std::vector<Destroyer> destroyer;

        /*starship.addLightFighter(5);
        starship.addDestroyer(2);*/


        // Command Actions
        starship.getCommandActions().Attack(T target, projectile);   T = Template
        starship.getCommandActions().Defend(T target);
        starship.getCommandActions().Regroup();
        starship.getCommandActions().Reposition(sf::Vector2 pos);

        starship.setVelocity();

        if(starship.getCommandActions() == CommandActions::Actions::ATTACK)
        {
            starship.attack(NEAREST_TARGET);
        }
        else if(starship.getCommandActions() == CommandActions::Actions::DEFEND)
        {
            starship.defend(NEAREST_TARGET);
        }
    }
