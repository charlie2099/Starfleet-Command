============================================
===============WORK PHILOSOPHY================
============================================

1) Make it work
2) Make it right
3) Make it fast

============================================
==============DEVELOPMENT PHASES===============
============================================

- Pre-alpha: Early development, prototyping, not yet playable
- Alpha: First complete playable version with core features implemented, but likely with bugs and missing content
- Beta: Feature complete, focusing on fixing bugs and polish
- Release Candidate: Nearly ready for release, final testing
- Release/Gold: Final product ready for distribution

============================================
=================PSEUDOCODE==================
============================================

___Perk & Upgrades System___

HOW IT WORKS
- When the player achieves enough XP (from destroying starships),
the game is auto-paused and the player is provided with a choice of
THREE perk and/or upgrade cards. After selecting a card, the game
shall resume, with the perk/upgrade now in effect. This process
repeats when the player meets/exceeds another XP threshold.

EXAMPLE UPGRADE CARDS
- Dreadnought_UpgradeCard

EXAMPLE PERK CARDS
- IncreasedScrapCollectionOnStarshipDestruction_PerkCard
- ReducedStarshipCosts_PerkCard
- ScrapBoost_PerkCard (i.e. displays a card named Scrap Booster,
with a PERK label top right, with a short description of the perk and
it's effects like +25 scrap every collection)

PerkData.json
UpgradeData.json

Decorator pattern?





ISettingType
{
    virtual void ApplySetting();
}

Toggle : ISettingType
{
    ApplySetting() override
    {
        _someBool = (data == "true")
    }
}
Selection : ISettingType
{
    ApplySetting() override
    {

    }
}





__BUTTON INTERFACES__
IInteractable
IButton
IButtonPopupName
IButtonImage
IButtonInfoBox

StarshipDeploymentButton (BtnPopupName, Drag&Drop,
UpgradeScrapDronesButton

__STARSHIP INTERFACES__
ICanHeal
ICanDamage


Replace Player and Enemy class with
- StarfleetCommander
- FleetCommander
- StarshipCommander
- Team
- Player
- PlayerController & EnemyController (with Controller interface)


___XP SYSTEM___
- Modify ProgressBar class to NOT apply progress based on time. It
should just apply a progress amount through a method, and then if
the user wants to apply it over time then they can just call that
method every x amount of seconds.

___REWARD SYSTEM___
- Trigger: Random intervals OR fixed intervals OR after each level up?
- Rewards: The better you play, and the more involved you are, the
better your chances are of receiving better perk choices. Perk choices may
be given based on the way you play? (or may be just one PLAYSTYLE perk?).
So if the player deploys a lot of lightfighters, then they may be offered
a perk that reinforces lightfighter units.



___FUN FACTORS___
- An adaptable and challenging enemy
- Roguelike reward system (choose 1 of 3 random perks that affect starship stats etc)
- Unlockable starships? (levels system where, after completing a 'mission', the player unlocks a new starship type to use in the next level)
- Story & Free-play modes (progress through story levels unlocking new starship types, free-play mode play with everything unlocked)




___ENEMY AI- BEHAVIOUR___
- Start of the game, deploy a random selection of weak units, to taunt
the player/get the battle going. (i.e. RandomUnitSpawnStartofGame_BehaviourRule(UNITS, SPAWN TIME) )
- Spontanously spawn random enemy units through the game, in
random intervals of 30-90 seconds, picking stronger units when the
 enemy exceeds certain scrap thresholds (RandomUnitSpawnIntervals_BehaviourRule(UNITS, SPAWN INTERVALS) )
- Counter the players attacks/strategies, prioritising the most
dangerous threats first (CounterAttack_BehaviourRule(THREAT UNIT, COUNTER UNITS) ).
- Spawn random units in undefended/unguarded lanes (UnguardedLaneAttack_BehaviourRule) )
- Spawn more or fewer units depending on how much scrap the
 player has (PlayerScrapLow_BehaviourRule(), PlayerScrapHigh_BehaviourRule() )





__AI DIRECTOR BEHAVIOUR RULES__
Build-up - MaxEnemyPop(10), MaxLightFighters(4), etc,
Peak - MaxEnemyPop(20), etc
PeakFade - MaxEnemyPop(5), etc
Respite - MaxEnemyPop(0), etc

Build-up - Max enemy population, restricted starship type spawns, default director calculation speed
Peak - Sustain max enemy population, unrestricted starship type spawns, special events?, enhanced director calculation speed (director at it's most analytic, and reactive state. Faster decision-making abilities.)
PeakFade - Minimum enemy population
Respite - Redundant state, remove entirely?

CounterAttack_BehaviourRule(DirectorState::BUILD_UP, ...)
CounterAttack_BehaviourRule(DirectorState::PEAK, ...)





___AI DIRECTOR___
- BUILD-UP (default spawn rate, default spawn chance of starship types, default lane spawn chance)
- PEAK (increased spawn rate, increased spawn chance of stronger starship types, increased chance of better lane spawning)

director.SpawnEnemy_OnDeploymentCompleted(TYPE, LANE)
director.SetEnemySpawnFrequency()

When to trigger behaviour calculator events
- Every time the director changes state (i.e. build-up, peak, etc)
- Every x amount of seconds?
- When a behaviour rule condition is met? (subscribe to a behaviour calculator callback that is invoked when a rule condition is satisfied?)
- Based on priority? first in first out?
- Based on intensity?


What do I want?
- Start of the game, spawn some weaker starships. Do this for a bit? or just once? While intensity below a certain threshold?
- If the player starts doing really well, spawn some stronger units, utilise different strategies
- If the player starts really struggled, spawn some weaker units or halt on spawning any more units until intensity reaches a certain threshold?


__Ai Logic__
- Spawn units that counter the player's units
- Overwhelm the player with loads of units during PEAK phase only
- Prioritise specific starship types
- Prioritise player-focused lanes


__Behaviour Rules__ (Name rules according to their actions, rather than their conditions? I.e. SomeAction instead of PlayerSpacelaneDominance?)
- CounterAttack
- FlankManeuver
- TankStrategy
- DamageStrategy
- StrongInitialAttack
- AttackMothership
- AllOutAttack
- AllOutDefence
- Reinforcement(DirectorState::PEAK)
- LaneRotation
- LaneConcentratedAttack
- DiversionAttack
- PriorityTarget

__Intensity Rules__ (Name rules according to their conditions, rather than their actions?)
- ScrapAbundance(scrapSurplusAmount, intensityRating)
- SpacelaneDominance
- StarshipDominance
- StarshipTypeDominance
- MothershipDistress
-

___Game Flow___
- Early game: Start with deploying weaker enemy units
- Mid game: After the player has deployed x amount of ships or of a certain type, the director should start deploying counter attacks, deploying stronger units
- Late game: Ai becomes even more aggressive, deploying stronger units and focusing on specific lanes


============================================
==============USEFUL INFORMATION===============
============================================
- Background image is 4096x4096
- Window dimensions are 1280x720

- Minimap view is larger than it appears, as the background simply
  isn't large enough to accommodate the entirety of the viewport.

- Change background texture rect size

- The minimap view doesn't appear to be actually moving when the main viewport moves?
  They should move in sync with each other. Do I need to set its position constantly to
  that of the main viewport?

- Currently the background image for the level is WAY TOO LARGE. However, it looks good.

- Dimensions of background need to change. Should be wider in width.

Combat Rules
- Lightfighters have low range, medium attack rate, low damage, and low health
- Heavyfighters have low range, high attack rate, low damage, and low health
- SupportFrigate have low range, low heal rate, low heal, and low health
- Dreadnoughts have high range, low attack rate, high damage, and medium health
- Battleships have medium range, low attack rate, medium damage, and high health
