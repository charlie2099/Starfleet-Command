============================================
===============WORK PHILOSOPHY================
============================================

1) Make it work
2) Make it right
3) Make it fast

============================================
==============DEVELOPMENT PHASES===============
============================================

- Pre-alpha: Early development, prototyping, not yet playable
- Alpha: First complete playable version with core features implemented, but likely with bugs and missing content
- Beta: Feature complete, focusing on fixing bugs and polish
- Release Candidate: Nearly ready for release, final testing
- Release/Gold: Final product ready for distribution

============================================
=================PSEUDOCODE==================
============================================


ISettingType
{
    virtual void ApplySetting();
}

Toggle : ISettingType
{
    ApplySetting() override
    {
        _someBool = (data == "true")
    }
}
Selection : ISettingType
{
    ApplySetting() override
    {

    }
}



_gameSettings->AddSettingOption("Fullscreen Mode", std::vector<std::string>{"OFF", "ON"});
gameSettingsData["Fullscreen Mode"] = _gameSettings->GetSettingOption("Fullscreen Mode").selectedValueIndex == 1 ? "true" : "false";


__AI Director Behaviour Rules__
Build-up - MaxEnemyPop(10), MaxLightFighters(4), etc,
Peak - MaxEnemyPop(20), etc
PeakFade - MaxEnemyPop(5), etc
Respite - MaxEnemyPop(0), etc

Build-up - Max enemy population, restricted starship type spawns, default director calculation speed
Peak - Sustain max enemy population, unrestricted starship type spawns, special events?, enhanced director calculation speed (director at it's most analytic, and reactive state. Faster decision-making abilities.)
PeakFade - Minimum enemy population
Respite - Redundant state, remove entirely?

CounterAttack_BehaviourRule(DirectorState::BUILD_UP, ...)
CounterAttack_BehaviourRule(DirectorState::PEAK, ...)


array for options elements

struct SettingsOption
{
    text settingsItemName
    text settingsItemActive
}
std::pair<SettingsOption, bool> _settingsElementPair


MUSIC                                                 ON
SPACELANES                                      ON
BACKGROUND COLOUR                  CYAN
BACKGROUND STARS COLOUR     LIGHTBLUE
PLAYER TEAM COLOUR                   LIGHTBLUE
ENEMY TEAM COLOUR                    LIGHTGREEN
DIRECTOR DIFFICULTY                     EASY                        (modifies calculation rate, max enemy pop, etc)




__BUTTON INTERFACES__
IInteractable
IButton
IButtonPopupName
IButtonImage
IButtonInfoBox

StarshipDeploymentButton (BtnPopupName, Drag&Drop,
UpgradeScrapDronesButton

__STARSHIP INTERFACES__
ICanHeal
ICanDamage


___AI DIRECTOR___
- BUILD-UP (default spawn rate, default spawn chance of starship types, default lane spawn chance)
- PEAK (increased spawn rate, increased spawn chance of stronger starship types, increased chance of better lane spawning)

director.SpawnEnemy_OnDeploymentCompleted(TYPE, LANE)
director.SetEnemySpawnFrequency()

When to trigger behaviour calculator events
- Every time the director changes state (i.e. build-up, peak, etc)
- Every x amount of seconds?
- When a behaviour rule condition is met? (subscribe to a behaviour calculator callback that is invoked when a rule condition is satisfied?)
- Based on priority? first in first out?
- Based on intensity?


What do I want?
- Start of the game, spawn some weaker starships. Do this for a bit? or just once? While intensity below a certain threshold?
- If the player starts doing really well, spawn some stronger units, utilise different strategies
- If the player starts really struggled, spawn some weaker units or halt on spawning any more units until intensity reaches a certain threshold?


__Ai Logic__
- Spawn units that counter the player's units
- Overwhelm the player with loads of units during PEAK phase only
- Prioritise specific starship types
- Prioritise player-focused lanes


__Behaviour Rules__ (Name rules according to their actions, rather than their conditions? I.e. SomeAction instead of PlayerSpacelaneDominance?)
- CounterAttack
- FlankManeuver
- TankStrategy
- DamageStrategy
- StrongInitialAttack
- AttackMothership
- AllOutAttack
- AllOutDefence
- Reinforcement(DirectorState::PEAK)
- LaneRotation
- LaneConcentratedAttack
- DiversionAttack
- PriorityTarget

__Intensity Rules__ (Name rules according to their conditions, rather than their actions?)
- ScrapAbundance(scrapSurplusAmount, intensityRating)
- SpacelaneDominance
- StarshipDominance
- StarshipTypeDominance
- MothershipDistress
-

___Game Flow___
- Early game: Start with deploying weaker enemy units
- Mid game: After the player has deployed x amount of ships or of a certain type, the director should start deploying counter attacks, deploying stronger units
- Late game: Ai becomes even more aggressive, deploying stronger units and focusing on specific lanes


============================================
==============USEFUL INFORMATION===============
============================================
- Background image is 4096x4096
- Window dimensions are 1280x720

- Minimap view is larger than it appears, as the background simply
  isn't large enough to accommodate the entirety of the viewport.

- Change background texture rect size

- The minimap view doesn't appear to be actually moving when the main viewport moves?
  They should move in sync with each other. Do I need to set its position constantly to
  that of the main viewport?

- Currently the background image for the level is WAY TOO LARGE. However, it looks good.

- Dimensions of background need to change. Should be wider in width.

Combat Rules
- Lightfighters have low range, medium attack rate, low damage, and low health
- Heavyfighters have low range, high attack rate, low damage, and low health
- SupportFrigate have low range, low heal rate, low heal, and low health
- Dreadnoughts have high range, low attack rate, high damage, and medium health
- Battleships have medium range, low attack rate, medium damage, and high health

============================================
================ENEMY SPAWNING===============
============================================
- Spawn a random enemy type every x amount of seconds
- Stronger enemies have less chance of spawning
- Spawn specific enemy types based on various conditions
- Create a Director Ai system that defines spawning rules
- Conditions:
   - If enemy in lane was spawned x amount of time ago, spawn enemy in lane
   - If player has x amount of specific unit types, spawn enemy type